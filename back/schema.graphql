# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  middlename: String
  lastname: String
  photo: Image
  phone: String
  telegram: String
  whatsapp: String
  role: String
  roleName: String
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  postcode: String
  country: String
  city: String
  street: String
  house: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  middlename: StringFilter
  lastname: StringFilter
  photo: ImageWhereInput
  phone: StringFilter
  telegram: StringFilter
  whatsapp: StringFilter
  role: StringFilter
  roleName: StringFilter
  orders: OrderManyRelationFilter
  postcode: StringFilter
  country: StringFilter
  city: StringFilter
  street: StringFilter
  house: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  middlename: OrderDirection
  lastname: OrderDirection
  phone: OrderDirection
  telegram: OrderDirection
  whatsapp: OrderDirection
  role: OrderDirection
  roleName: OrderDirection
  postcode: OrderDirection
  country: OrderDirection
  city: OrderDirection
  street: OrderDirection
  house: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  middlename: String
  lastname: String
  photo: ImageRelateToOneForUpdateInput
  phone: String
  telegram: String
  whatsapp: String
  role: String
  roleName: String
  orders: OrderRelateToManyForUpdateInput
  postcode: String
  country: String
  city: String
  street: String
  house: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  middlename: String
  lastname: String
  photo: ImageRelateToOneForCreateInput
  phone: String
  telegram: String
  whatsapp: String
  role: String
  roleName: String
  orders: OrderRelateToManyForCreateInput
  postcode: String
  country: String
  city: String
  street: String
  house: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

type Image {
  id: ID!
  name: String
  altText: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  altText: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

type Product {
  id: ID!
  title: String
  caption: String
  description: String
  price: Int
  oldPrice: Int
  bonus: Int
  image: Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  vendorCode: String
  balance: Int
  isActive: Boolean
  category(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  subCategory: SubCategory
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  colorName: String
  colorCode: String
  link: String
  material: String
  type: String
  handlingType: String
  sideHeight: Float
  transomHeight: Float
  overallLength: Float
  overallWidth: Float
  weight: Float
  loadCapacity: Float
  permissibleMotorPower: String
  deadriseAmidships: Float
  deadriseTransom: Float
  passengers: Int
  beadThickness: Float
  bottomThickness: Float
  relatedProducts(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  relatedProductsCount(where: ProductWhereInput! = {}): Int
  extras(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  extrasCount(where: ProductWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  rating: Float
  ratings: Int
  specifications: String
  properties: String
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
  clicks: Int
  orders: Int
}

input ProductWhereUniqueInput {
  id: ID
  link: String
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  title: StringFilter
  caption: StringFilter
  description: StringFilter
  price: IntNullableFilter
  oldPrice: IntNullableFilter
  bonus: IntNullableFilter
  image: ImageWhereInput
  images: ImageManyRelationFilter
  vendorCode: StringFilter
  balance: IntNullableFilter
  isActive: BooleanFilter
  category: CategoryManyRelationFilter
  subCategory: SubCategoryWhereInput
  tags: TagManyRelationFilter
  colorName: StringFilter
  colorCode: StringFilter
  link: StringFilter
  material: StringFilter
  type: StringFilter
  handlingType: StringFilter
  sideHeight: FloatNullableFilter
  transomHeight: FloatNullableFilter
  overallLength: FloatNullableFilter
  overallWidth: FloatNullableFilter
  weight: FloatNullableFilter
  loadCapacity: FloatNullableFilter
  permissibleMotorPower: StringFilter
  deadriseAmidships: FloatNullableFilter
  deadriseTransom: FloatNullableFilter
  passengers: IntNullableFilter
  beadThickness: FloatNullableFilter
  bottomThickness: FloatNullableFilter
  relatedProducts: ProductManyRelationFilter
  extras: ProductManyRelationFilter
  services: ServiceManyRelationFilter
  rating: FloatNullableFilter
  ratings: IntNullableFilter
  specifications: StringFilter
  properties: StringFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoCanonical: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  clicks: IntNullableFilter
  orders: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ServiceManyRelationFilter {
  every: ServiceWhereInput
  some: ServiceWhereInput
  none: ServiceWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  title: OrderDirection
  caption: OrderDirection
  description: OrderDirection
  price: OrderDirection
  oldPrice: OrderDirection
  bonus: OrderDirection
  vendorCode: OrderDirection
  balance: OrderDirection
  isActive: OrderDirection
  colorName: OrderDirection
  colorCode: OrderDirection
  link: OrderDirection
  material: OrderDirection
  type: OrderDirection
  handlingType: OrderDirection
  sideHeight: OrderDirection
  transomHeight: OrderDirection
  overallLength: OrderDirection
  overallWidth: OrderDirection
  weight: OrderDirection
  loadCapacity: OrderDirection
  permissibleMotorPower: OrderDirection
  deadriseAmidships: OrderDirection
  deadriseTransom: OrderDirection
  passengers: OrderDirection
  beadThickness: OrderDirection
  bottomThickness: OrderDirection
  rating: OrderDirection
  ratings: OrderDirection
  specifications: OrderDirection
  properties: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  seoCanonical: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  clicks: OrderDirection
  orders: OrderDirection
}

input ProductUpdateInput {
  title: String
  caption: String
  description: String
  price: Int
  oldPrice: Int
  bonus: Int
  image: ImageRelateToOneForUpdateInput
  images: ImageRelateToManyForUpdateInput
  vendorCode: String
  balance: Int
  isActive: Boolean
  category: CategoryRelateToManyForUpdateInput
  subCategory: SubCategoryRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  colorName: String
  colorCode: String
  link: String
  material: String
  type: String
  handlingType: String
  sideHeight: Float
  transomHeight: Float
  overallLength: Float
  overallWidth: Float
  weight: Float
  loadCapacity: Float
  permissibleMotorPower: String
  deadriseAmidships: Float
  deadriseTransom: Float
  passengers: Int
  beadThickness: Float
  bottomThickness: Float
  relatedProducts: ProductRelateToManyForUpdateInput
  extras: ProductRelateToManyForUpdateInput
  services: ServiceRelateToManyForUpdateInput
  rating: Float
  ratings: Int
  specifications: String
  properties: String
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
  clicks: Int
  orders: Int
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input SubCategoryRelateToOneForUpdateInput {
  create: SubCategoryCreateInput
  connect: SubCategoryWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ServiceRelateToManyForUpdateInput {
  disconnect: [ServiceWhereUniqueInput!]
  set: [ServiceWhereUniqueInput!]
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  title: String
  caption: String
  description: String
  price: Int
  oldPrice: Int
  bonus: Int
  image: ImageRelateToOneForCreateInput
  images: ImageRelateToManyForCreateInput
  vendorCode: String
  balance: Int
  isActive: Boolean
  category: CategoryRelateToManyForCreateInput
  subCategory: SubCategoryRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  colorName: String
  colorCode: String
  link: String
  material: String
  type: String
  handlingType: String
  sideHeight: Float
  transomHeight: Float
  overallLength: Float
  overallWidth: Float
  weight: Float
  loadCapacity: Float
  permissibleMotorPower: String
  deadriseAmidships: Float
  deadriseTransom: Float
  passengers: Int
  beadThickness: Float
  bottomThickness: Float
  relatedProducts: ProductRelateToManyForCreateInput
  extras: ProductRelateToManyForCreateInput
  services: ServiceRelateToManyForCreateInput
  rating: Float
  ratings: Int
  specifications: String
  properties: String
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
  clicks: Int
  orders: Int
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input SubCategoryRelateToOneForCreateInput {
  create: SubCategoryCreateInput
  connect: SubCategoryWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ServiceRelateToManyForCreateInput {
  create: [ServiceCreateInput!]
  connect: [ServiceWhereUniqueInput!]
}

type Service {
  id: ID!
  title: String
  code: String
  caption: String
  description: String
  image: Image
  price: Int
  bonus: Int
  vendorCode: Int
  isActive: Boolean
  category: Category
  createdAt: DateTime
  updatedAt: DateTime
  clicks: Int
  orders: Int
}

input ServiceWhereUniqueInput {
  id: ID
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  code: StringFilter
  caption: StringFilter
  description: StringFilter
  image: ImageWhereInput
  price: IntNullableFilter
  bonus: IntNullableFilter
  vendorCode: IntNullableFilter
  isActive: BooleanFilter
  category: CategoryWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  clicks: IntNullableFilter
  orders: IntNullableFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  code: OrderDirection
  caption: OrderDirection
  description: OrderDirection
  price: OrderDirection
  bonus: OrderDirection
  vendorCode: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  clicks: OrderDirection
  orders: OrderDirection
}

input ServiceUpdateInput {
  title: String
  code: String
  caption: String
  description: String
  image: ImageRelateToOneForUpdateInput
  price: Int
  bonus: Int
  vendorCode: Int
  isActive: Boolean
  category: CategoryRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  clicks: Int
  orders: Int
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  code: String
  caption: String
  description: String
  image: ImageRelateToOneForCreateInput
  price: Int
  bonus: Int
  vendorCode: Int
  isActive: Boolean
  category: CategoryRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  clicks: Int
  orders: Int
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Category {
  id: ID!
  code: String
  title: String
  caption: String
  image: Image
  children(where: SubCategoryWhereInput! = {}, orderBy: [SubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubCategoryWhereUniqueInput): [SubCategory!]
  childrenCount(where: SubCategoryWhereInput! = {}): Int
  isActive: Boolean
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  code: StringFilter
  title: StringFilter
  caption: StringFilter
  image: ImageWhereInput
  children: SubCategoryManyRelationFilter
  isActive: BooleanFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoCanonical: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubCategoryManyRelationFilter {
  every: SubCategoryWhereInput
  some: SubCategoryWhereInput
  none: SubCategoryWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  caption: OrderDirection
  isActive: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  seoCanonical: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  code: String
  title: String
  caption: String
  image: ImageRelateToOneForUpdateInput
  children: SubCategoryRelateToManyForUpdateInput
  isActive: Boolean
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubCategoryRelateToManyForUpdateInput {
  disconnect: [SubCategoryWhereUniqueInput!]
  set: [SubCategoryWhereUniqueInput!]
  create: [SubCategoryCreateInput!]
  connect: [SubCategoryWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  code: String
  title: String
  caption: String
  image: ImageRelateToOneForCreateInput
  children: SubCategoryRelateToManyForCreateInput
  isActive: Boolean
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubCategoryRelateToManyForCreateInput {
  create: [SubCategoryCreateInput!]
  connect: [SubCategoryWhereUniqueInput!]
}

type SubCategory {
  id: ID!
  code: String
  title: String
  caption: String
  image: Image
  parent: Category
  isActive: Boolean
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubCategoryWhereUniqueInput {
  id: ID
}

input SubCategoryWhereInput {
  AND: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  NOT: [SubCategoryWhereInput!]
  id: IDFilter
  code: StringFilter
  title: StringFilter
  caption: StringFilter
  image: ImageWhereInput
  parent: CategoryWhereInput
  isActive: BooleanFilter
  seoTitle: StringFilter
  seoDescription: StringFilter
  seoCanonical: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubCategoryOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  caption: OrderDirection
  isActive: OrderDirection
  seoTitle: OrderDirection
  seoDescription: OrderDirection
  seoCanonical: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubCategoryUpdateInput {
  code: String
  title: String
  caption: String
  image: ImageRelateToOneForUpdateInput
  parent: CategoryRelateToOneForUpdateInput
  isActive: Boolean
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SubCategoryUpdateArgs {
  where: SubCategoryWhereUniqueInput!
  data: SubCategoryUpdateInput!
}

input SubCategoryCreateInput {
  code: String
  title: String
  caption: String
  image: ImageRelateToOneForCreateInput
  parent: CategoryRelateToOneForCreateInput
  isActive: Boolean
  seoTitle: String
  seoDescription: String
  seoCanonical: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Cart {
  id: ID!
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CartWhereUniqueInput {
  id: ID
  userId: String
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IDFilter
  products: StringFilter
  userId: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CartOrderByInput {
  id: OrderDirection
  products: OrderDirection
  userId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CartUpdateInput {
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CartUpdateArgs {
  where: CartWhereUniqueInput!
  data: CartUpdateInput!
}

input CartCreateInput {
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Tag {
  id: ID!
  code: String
  title: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  code: StringFilter
  title: StringFilter
  products: ProductManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  code: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  code: String
  title: String
  products: ProductRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  code: String
  title: String
  products: ProductRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type FavoritesList {
  id: ID!
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FavoritesListWhereUniqueInput {
  id: ID
  userId: String
}

input FavoritesListWhereInput {
  AND: [FavoritesListWhereInput!]
  OR: [FavoritesListWhereInput!]
  NOT: [FavoritesListWhereInput!]
  id: IDFilter
  products: StringFilter
  userId: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FavoritesListOrderByInput {
  id: OrderDirection
  products: OrderDirection
  userId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FavoritesListUpdateInput {
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FavoritesListUpdateArgs {
  where: FavoritesListWhereUniqueInput!
  data: FavoritesListUpdateInput!
}

input FavoritesListCreateInput {
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderStatus {
  id: ID!
  code: String
  color: String
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderStatusWhereUniqueInput {
  id: ID
}

input OrderStatusWhereInput {
  AND: [OrderStatusWhereInput!]
  OR: [OrderStatusWhereInput!]
  NOT: [OrderStatusWhereInput!]
  id: IDFilter
  code: StringFilter
  color: StringFilter
  title: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input OrderStatusOrderByInput {
  id: OrderDirection
  code: OrderDirection
  color: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrderStatusUpdateInput {
  code: String
  color: String
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderStatusUpdateArgs {
  where: OrderStatusWhereUniqueInput!
  data: OrderStatusUpdateInput!
}

input OrderStatusCreateInput {
  code: String
  color: String
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Order {
  id: ID!
  products: JSON
  user: User
  status: OrderStatus
  address: String
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  user: UserWhereInput
  status: OrderStatusWhereInput
  address: StringFilter
  comment: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  address: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrderUpdateInput {
  products: JSON
  user: UserRelateToOneForUpdateInput
  status: OrderStatusRelateToOneForUpdateInput
  address: String
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input OrderStatusRelateToOneForUpdateInput {
  create: OrderStatusCreateInput
  connect: OrderStatusWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  products: JSON
  user: UserRelateToOneForCreateInput
  status: OrderStatusRelateToOneForCreateInput
  address: String
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input OrderStatusRelateToOneForCreateInput {
  create: OrderStatusCreateInput
  connect: OrderStatusWhereUniqueInput
}

type Question {
  id: ID!
  name: String
  phone: String
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionWhereUniqueInput {
  id: ID
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  name: StringFilter
  phone: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input QuestionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input QuestionUpdateInput {
  name: String
  phone: String
  createdAt: DateTime
  updatedAt: DateTime
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  name: String
  phone: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Review {
  id: ID!
  name: String
  phone: String
  text: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  name: StringFilter
  phone: StringFilter
  text: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  text: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ReviewUpdateInput {
  name: String
  phone: String
  text: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  name: String
  phone: String
  text: String
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createSubCategory(data: SubCategoryCreateInput!): SubCategory
  createSubCategories(data: [SubCategoryCreateInput!]!): [SubCategory]
  updateSubCategory(where: SubCategoryWhereUniqueInput!, data: SubCategoryUpdateInput!): SubCategory
  updateSubCategories(data: [SubCategoryUpdateArgs!]!): [SubCategory]
  deleteSubCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  deleteSubCategories(where: [SubCategoryWhereUniqueInput!]!): [SubCategory]
  createCart(data: CartCreateInput!): Cart
  createCarts(data: [CartCreateInput!]!): [Cart]
  updateCart(where: CartWhereUniqueInput!, data: CartUpdateInput!): Cart
  updateCarts(data: [CartUpdateArgs!]!): [Cart]
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteCarts(where: [CartWhereUniqueInput!]!): [Cart]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createFavoritesList(data: FavoritesListCreateInput!): FavoritesList
  createFavoritesLists(data: [FavoritesListCreateInput!]!): [FavoritesList]
  updateFavoritesList(where: FavoritesListWhereUniqueInput!, data: FavoritesListUpdateInput!): FavoritesList
  updateFavoritesLists(data: [FavoritesListUpdateArgs!]!): [FavoritesList]
  deleteFavoritesList(where: FavoritesListWhereUniqueInput!): FavoritesList
  deleteFavoritesLists(where: [FavoritesListWhereUniqueInput!]!): [FavoritesList]
  createOrderStatus(data: OrderStatusCreateInput!): OrderStatus
  createOrderStatuses(data: [OrderStatusCreateInput!]!): [OrderStatus]
  updateOrderStatus(where: OrderStatusWhereUniqueInput!, data: OrderStatusUpdateInput!): OrderStatus
  updateOrderStatuses(data: [OrderStatusUpdateArgs!]!): [OrderStatus]
  deleteOrderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  deleteOrderStatuses(where: [OrderStatusWhereUniqueInput!]!): [OrderStatus]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(where: QuestionWhereUniqueInput!, data: QuestionUpdateInput!): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  service(where: ServiceWhereUniqueInput!): Service
  servicesCount(where: ServiceWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  subCategories(where: SubCategoryWhereInput! = {}, orderBy: [SubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubCategoryWhereUniqueInput): [SubCategory!]
  subCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  subCategoriesCount(where: SubCategoryWhereInput! = {}): Int
  carts(where: CartWhereInput! = {}, orderBy: [CartOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CartWhereUniqueInput): [Cart!]
  cart(where: CartWhereUniqueInput!): Cart
  cartsCount(where: CartWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  favoritesLists(where: FavoritesListWhereInput! = {}, orderBy: [FavoritesListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FavoritesListWhereUniqueInput): [FavoritesList!]
  favoritesList(where: FavoritesListWhereUniqueInput!): FavoritesList
  favoritesListsCount(where: FavoritesListWhereInput! = {}): Int
  orderStatuses(where: OrderStatusWhereInput! = {}, orderBy: [OrderStatusOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderStatusWhereUniqueInput): [OrderStatus!]
  orderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  orderStatusesCount(where: OrderStatusWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  question(where: QuestionWhereUniqueInput!): Question
  questionsCount(where: QuestionWhereInput! = {}): Int
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
